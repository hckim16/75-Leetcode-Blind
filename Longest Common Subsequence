Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted 
without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.



class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        //create temp 2d vector
        int t1 = text1.size();
        int t2 = text2.size();
        vector<vector<int>> temp(t1 + 1, vector<int>(t2 + 1, 0));  // need extra row + col to get prev value
        
        //nested for loop to fill 2d vector
        for (int i = 1; i <= t1; i++) {
            for (int j = 1; j <= t2; j++) {
                if (text1[i - 1] == text2[j - 1]) temp[i][j] = temp[i - 1][j - 1] + 1;
                else temp[i][j] = max(temp[i - 1][j], temp[i][j - 1]);
            }
        }
        
        //return max value at 2d vector length
        return temp[t1][t2];
    }
};
