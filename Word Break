Given a string s and a dictionary of strings wordDict, 
return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.


class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
    //initial unordered map and insert wordDict
    unordered_map<int, string> map;
    for (int i = 0; i < wordDict.size(); i++) {
      map.insert({i, wordDict[i]});
    }
      
    //initial temp vector set to false
    vector<bool> temp(s.size() + 1, false);
    temp[0] = true;
    
    //nested for loop to check substrings in s with map entries
    for (int i = 1; i <= s.size(); i++) {
      for (int j = i - 1; j >= 0; j--) {
        if (temp[j] && map.count(s.substr(j, i - 1)) > 0) {
          temp[i] = true;
          break;
        }
      }
    }
    
    //return vector
    if (temp[s.size()]) return true;
    else return false;
    
        
    }
};
