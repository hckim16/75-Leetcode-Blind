There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector < vector<int>> vec(m, vector<int>(n));
        
        for (int i = 0; i < vec.size(); i++) {
            vec[i][0] = 1;
        }
        for (int j = 0; j < vec[0].size(); j++) {
            vec[0][j] = 1;
        }

        for (int i = 1; i < vec.size(); i++) {
            for (int j = 1; j < vec[i].size(); j++) {
                vec[i][j] = vec[i][j - 1] + vec[i - 1][j];
            }
        }
        
        return vec[m - 1][n - 1];
    }
};
