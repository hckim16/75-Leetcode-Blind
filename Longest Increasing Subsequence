Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. 
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        int val = 1;   
        vector<int> temp1(n);
        fill(temp1.begin(), temp1.end(), val);
        
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    temp1[i] = max(temp1[i], temp1[j] + 1);
                }
            }
        }
        int max =  *max_element(temp1.begin(), temp1.end());  
        return max;
    }
};

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) { 
        vector<int> temp;
        
        for (auto num : nums) {
            auto lower = lower_bound(temp.begin(), temp.end(), num);
            if (lower == temp.end()) {
                temp.push_back(num);
            } else {
                temp[lower - temp.begin()] = num;
            }
        }
        return temp.size();
    }
};
