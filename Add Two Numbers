You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode dummyHead (-1);
        ListNode* tail = &dummyHead;
        
        ListNode* current1 = l1;
        ListNode* current2 = l2;
        int carry = 0;
        
        while (current1 != nullptr || current2 != nullptr || carry > 0) {
            int val1 = current1 == nullptr ? 0 : current1-> val;
            int val2 = current2 == nullptr ? 0 : current2-> val;
            int sum = val1 + val2 + carry;
            ListNode* newNode = new ListNode(sum % 10);
            tail-> next = newNode;
            tail = tail-> next;
            
            if (sum > 9) carry = 1;
            else carry = 0;
            
            if (current1 != nullptr) current1 = current1-> next;
            if (current2 != nullptr) current2 = current2-> next;
        }
        return dummyHead.next;
    }
};
